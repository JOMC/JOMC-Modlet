<?xml version="1.0" encoding="UTF-8"?>
<!--

  Copyright (C) 2005 Christian Schulte <cs@schulte.it>
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:

    o Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    o Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the
      distribution.

  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  $JOMC$

-->
<jaxb:bindings xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
               xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               xmlns:modlet="http://jomc.org/modlet"
               xmlns:ci="http://jaxb.dev.java.net/plugin/code-injector"
               version="2.0">

  <jaxb:bindings schemaLocation="jomc-modlet-1.9.xsd">
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='ModletObject']">
      <ci:code><![CDATA[
    /**
     * Public identifier of the modlet model.
     */
    public static final String MODEL_PUBLIC_ID = "http://jomc.org/modlet";

    /**
     * Gets a single {@code JAXBElement} matching a namespace URI and local part from a given list of objects.
     *
     * @param any The list to search.
     * @param namespaceURI The namespace URI of the {@code JAXBElement} to return.
     * @param localPart The local part of the {@code JAXBElement} to return.
     * @param type The class of the type the element is bound to.
     * @param <T> The type the element is bound to.
     *
     * @return The {@code JAXBElement} matching {@code namespaceURI} and {@code localPart} from the {@code any} list or
     * {@code null} if no such element is found.
     *
     * @throws NullPointerException if {@code any}, {@code namespaceURI}, {@code localPart} or {@code type} is
     * {@code null}.
     * @throws IllegalStateException if {@code any} contains more than one matching element.
     *
     * @since 1.1
     */
    protected <T> javax.xml.bind.JAXBElement<T> getAnyElement( final java.util.List<Object> any,
                                                               final String namespaceURI,
                                                               final String localPart,
                                                               final Class<T> type )
    {
        java.util.Objects.requireNonNull( any, "any" );
        java.util.Objects.requireNonNull( namespaceURI, "namespaceURI" );
        java.util.Objects.requireNonNull( localPart, "localPart" );
        java.util.Objects.requireNonNull( type, "type" );

        javax.xml.bind.JAXBElement<?> anyElement = null;

        try ( final java.util.stream.Stream<?> st0 = any.parallelStream().unordered() )
        {
            final java.util.List<javax.xml.bind.JAXBElement<?>> candidates =
                st0.filter( o  -> o instanceof javax.xml.bind.JAXBElement<?> ).
                    map( o  -> (javax.xml.bind.JAXBElement<?>) o ).
                    filter( e  -> namespaceURI.equals( e.getName().getNamespaceURI() )
                                       && localPart.equals( e.getName().getLocalPart() ) ).
                    collect( java.util.stream.Collector.of( java.util.concurrent.CopyOnWriteArrayList::new,
                                                            java.util.List::add, ( l1, l2 )  ->
                                                        {
                                                            l1.addAll( l2 );
                                                            return l1;
                                                        }, java.util.stream.Collector.Characteristics.CONCURRENT,
                                                            java.util.stream.Collector.Characteristics.UNORDERED ) );

            if ( candidates.size() > 1 )
            {
                throw new IllegalStateException( getMessage( "nonUniqueElement", this.getClass().getName(),
                                                             namespaceURI, localPart ) );

            }

            if ( !candidates.isEmpty() )
            {
                anyElement = candidates.get( 0 );
            }
        }

        if ( anyElement != null && anyElement.getValue() != null && anyElement.getValue().getClass().equals( type ) )
        {
            @SuppressWarnings( "unchecked" ) final javax.xml.bind.JAXBElement<T> e =
                (javax.xml.bind.JAXBElement<T>) anyElement;

            return e;
        }

        return null;
    }

    /**
     * Gets a list containing all {@code JAXBElement}s matching a namespace URI and local part from a given list of
     * objects.
     *
     * @param any The list to search.
     * @param namespaceURI The namespace URI of the {@code JAXBElement}s to return.
     * @param localPart The local part of the {@code JAXBElement}s to return.
     * @param type The class of the type the elements are bound to.
     * @param <T> The type the elements are bound to.
     *
     * @return An unmodifiable list of all {@code JAXBElement}s matching {@code namespaceURI} and {@code localPart} from
     * the {@code any} list - an empty list if no such elements are found.
     *
     * @throws NullPointerException if {@code any}, {@code namespaceURI}, {@code localPart} or {@code type} is
     * {@code null}.
     *
     * @since 1.1
     */
    protected <T> java.util.List<javax.xml.bind.JAXBElement<T>> getAnyElements( final java.util.List<Object> any,
                                                                                final String namespaceURI,
                                                                                final String localPart,
                                                                                final Class<T> type )
    {
        java.util.Objects.requireNonNull( any, "any" );
        java.util.Objects.requireNonNull( namespaceURI, "namespaceURI" );
        java.util.Objects.requireNonNull( localPart, "localPart" );
        java.util.Objects.requireNonNull( type, "type" );

        final java.util.List<javax.xml.bind.JAXBElement<T>> anyElements = new java.util.ArrayList<>( any.size() );

        try ( final java.util.stream.Stream<?> st0 = any.parallelStream().unordered() )
        {
            anyElements.addAll( st0.filter( o  -> o instanceof javax.xml.bind.JAXBElement<?> ).
                map( o  -> (javax.xml.bind.JAXBElement<?>) o ).
                filter( e  -> namespaceURI.equals( e.getName().getNamespaceURI() )
                                   && localPart.equals( e.getName().getLocalPart() )
                                   && e.getValue() != null && e.getValue().getClass().equals( type ) ).
                map( e  ->
                {
                    @SuppressWarnings( "unchecked" )
                    final javax.xml.bind.JAXBElement<T> g = (javax.xml.bind.JAXBElement<T>) e;
                    return g;
                } ).
                collect( java.util.stream.Collector.of( java.util.concurrent.CopyOnWriteArrayList::new,
                                                        java.util.List::add, ( l1, l2 )  ->
                                                    {
                                                        l1.addAll( l2 );
                                                        return l1;
                                                    }, java.util.stream.Collector.Characteristics.CONCURRENT,
                                                        java.util.stream.Collector.Characteristics.UNORDERED ) ) );

        }

        return java.util.Collections.unmodifiableList( anyElements );
    }

    /**
     * Gets a single object matching a class from a given list of objects.
     *
     * @param any The list to search.
     * @param clazz The class to return an instance of.
     * @param <T> The type of the object to return.
     *
     * @return The instance of {@code clazz} from the {@code any} list or {@code null}, if no such instance is found.
     *
     * @throws NullPointerException if {@code any} or {@code clazz} is {@code null}.
     * @throws IllegalStateException if {@code any} contains more than one matching object.
     */
    protected <T> T getAnyObject( final java.util.List<Object> any, final Class<T> clazz )
    {
        java.util.Objects.requireNonNull( any, "any" );
        java.util.Objects.requireNonNull( clazz, "clazz" );

        T anyObject = null;

        try ( final java.util.stream.Stream<?> st0 = any.parallelStream().unordered() )
        {
            final java.util.List<?> candidates = st0.map( o  ->
            {
                Object mapped = o;

                if ( o instanceof javax.xml.bind.JAXBElement<?> )
                {
                    mapped = ( (javax.xml.bind.JAXBElement<?>) o ).getValue();
                }

                return mapped;
            } ).filter( o  -> clazz.equals( o.getClass() ) ).
                collect( java.util.stream.Collector.of( java.util.concurrent.CopyOnWriteArrayList::new,
                                                        java.util.List::add, ( l1, l2 )  ->
                                                    {
                                                        l1.addAll( l2 );
                                                        return l1;
                                                    }, java.util.stream.Collector.Characteristics.CONCURRENT,
                                                        java.util.stream.Collector.Characteristics.UNORDERED ) );

            if ( candidates.size() > 1 )
            {
                throw new IllegalStateException( getMessage( "nonUniqueObject", this.getClass().getName(),
                                                             clazz.getName() ) );

            }
            if ( !candidates.isEmpty() )
            {
                @SuppressWarnings( "unchecked" ) final T object = (T) candidates.get( 0 );
                anyObject = object;
            }
        }

        return anyObject;
    }

    /**
     * Gets a list containing all objects matching a class from a given list of objects.
     *
     * @param any The list to search.
     * @param clazz The class to return all instances of.
     * @param <T> The type of the objects to return.
     *
     * @return An unmodifiable list of all instances of {@code clazz} from the {@code any} list - an empty list if no
     * such objects are found.
     *
     * @throws NullPointerException if {@code any} or {@code clazz} is {@code null}.
     */
    protected <T> java.util.List<T> getAnyObjects( final java.util.List<Object> any, final Class<T> clazz )
    {
        java.util.Objects.requireNonNull( any, "any" );
        java.util.Objects.requireNonNull( clazz, "clazz" );

        final java.util.List<T> anyElements = new java.util.ArrayList<>( any.size() );

        try ( final java.util.stream.Stream<?> st0 = any.parallelStream().unordered() )
        {
            anyElements.addAll( st0.map( o  ->
            {
                Object mapped = o;

                if ( o instanceof javax.xml.bind.JAXBElement<?> )
                {
                    mapped = ( (javax.xml.bind.JAXBElement<?>) o ).getValue();
                }

                return mapped;
            } ).filter( o  -> clazz.equals( o.getClass() ) ).
                map( o  ->
                {
                    @SuppressWarnings( "unchecked" ) final T object = (T) o;
                    return object;
                } ).
                collect( java.util.stream.Collector.of( java.util.concurrent.CopyOnWriteArrayList::new,
                                                        java.util.List::add, ( l1, l2 )  ->
                                                    {
                                                        l1.addAll( l2 );
                                                        return l1;
                                                    }, java.util.stream.Collector.Characteristics.CONCURRENT,
                                                        java.util.stream.Collector.Characteristics.UNORDERED ) ) );

        }

        return java.util.Collections.unmodifiableList( anyElements );
    }

    private static String getMessage( final String key, final Object... args )
    {
        return java.text.MessageFormat.format( java.util.ResourceBundle.getBundle(
            ModletObject.class.getName().replace( '.', '/' ), java.util.Locale.getDefault() ).
            getString( key ), args );

    }]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='Model']/xs:complexContent/xs:extension/xs:attribute[@name='identifier']">
      <jaxb:property>
        <jaxb:javadoc>The identifier of the model.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Model']">
      <ci:code><![CDATA[
    /**
     * Gets a single {@code JAXBElement} matching a namespace URI and local part from the {@code any} property of the
     * instance.
     *
     * @param namespaceURI The namespace URI of the {@code JAXBElement} to return.
     * @param localPart The local part of the {@code JAXBElement} to return.
     * @param type The class of the type the element is bound to.
     * @param <T> The type the element is bound to.
     *
     * @return The {@code JAXBElement} matching {@code namespaceURI} and {@code localPart} from the {@code any} property
     * of the instance or {@code null}, if no such element is found.
     *
     * @throws NullPointerException if {@code namespaceURI}, {@code localPart} or {@code type} is {@code null}.
     * @throws IllegalStateException if the {@code any} property contains more than one matching element.
     *
     * @see #getAnyElement(java.util.List, java.lang.String, java.lang.String, java.lang.Class)
     *
     * @since 1.1
     */
    public <T> javax.xml.bind.JAXBElement<T> getAnyElement( final String namespaceURI, final String localPart,
                                                            final Class<T> type )
    {
        return this.getAnyElement( this.getAny(), namespaceURI, localPart, type );
    }

    /**
     * Gets a list containing all {@code JAXBElement}s matching a namespace URI and local part from the {@code any}
     * property of the instance.
     *
     * @param namespaceURI The namespace URI of the {@code JAXBElement}s to return.
     * @param localPart The local part of the {@code JAXBElement}s to return.
     * @param type The class of the type the elements are bound to.
     * @param <T> The type the elements are bound to.
     *
     * @return An unmodifiable list of all {@code JAXBElement}s matching {@code namespaceURI} and {@code localPart} from
     * the {@code any} property of the instance - an empty list if no such elements are found.
     *
     * @throws NullPointerException if {@code namespaceURI}, {@code localPart} or {@code type} is {@code null}.
     *
     * @see #getAnyElements(java.util.List, java.lang.String, java.lang.String, java.lang.Class)
     *
     * @since 1.1
     */
    public <T> java.util.List<javax.xml.bind.JAXBElement<T>> getAnyElements( final String namespaceURI,
                                                                             final String localPart,
                                                                             final Class<T> type )
    {
        return this.getAnyElements( this.getAny(), namespaceURI, localPart, type );
    }

    /**
     * Gets a single object matching a given class from the {@code any} property of the instance.
     *
     * @param clazz The class to return an instance of.
     * @param <T> The type of the object to return.
     *
     * @return The instance of {@code clazz} from the {@code any} property of the instance or {@code null}, if no such
     * instance is found.
     *
     * @throws NullPointerException if {@code clazz} is {@code null}.
     * @throws IllegalStateException if the {@code any} property contains more than one matching object.
     *
     * @see #getAnyObject(java.util.List, java.lang.Class)
     */
    public <T> T getAnyObject( final Class<T> clazz )
    {
        return this.getAnyObject( this.getAny(), clazz );
    }

    /**
     * Gets a list containing all objects matching a given class from the {@code any} property of the instance.
     *
     * @param clazz The class to return all instances of.
     * @param <T> The type of the objects to return.
     *
     * @return An unmodifiable list of all instances of {@code clazz} from the {@code any} property of the instance -
     * an empty list if no such objects are found.
     *
     * @throws NullPointerException if {@code clazz} is {@code null}.
     *
     * @see #getAnyObjects(java.util.List, java.lang.Class)
     */
    public <T> java.util.List<T> getAnyObjects( final Class<T> clazz )
    {
        return this.getAnyObjects( this.getAny(), clazz );
    }]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='Modlets']">
      <ci:code><![CDATA[
    /**
     * Gets a modlet for a given name from the list of modlets.
     *
     * @param name The name of the modlet to return.
     *
     * @return The first matching modlet or {@code null}, if no such modlet is found.
     *
     * @throws NullPointerException if {@code name} is {@code null}.
     *
     * @see #getModlet()
     * @see Modlet#getName()
     */
    public Modlet getModlet( final String name )
    {
        java.util.Objects.requireNonNull( name, "name" );
        try ( final java.util.stream.Stream<Modlet> st0 = this.getModlet().parallelStream().unordered() )
        {
            return st0.filter( m  -> name.equals( m.getName() ) ).findFirst().orElse( null );
        }
    }

    /**
     * Merges modlets of a model from this list of modlets to a single modlet.
     *
     * @param name The name of the modlet to return.
     * @param model The identifier of the model of the modlet to return.
     *
     * @return A modlet holding all modlet objects of the model identified by {@code model} from the list.
     *
     * @throws NullPointerException if {@code name} or {@code model} is {@code null}.
     *
     * @see #getModlet()
     * @see Modlet#getModel()
     */
    public Modlet getMergedModlet( final String name, final String model )
    {
        final Modlet mergedModlet = new Modlet();
        mergedModlet.setName( java.util.Objects.requireNonNull( name, "name" ) );
        mergedModlet.setModel( java.util.Objects.requireNonNull( model, "model" ) );

        try ( final java.util.stream.Stream<Modlet> st0 = this.getModlet().parallelStream() )
        {
            st0.reduce( mergedModlet, ( m1, m2 )  ->
                    {
                        if ( m1.getModel().equals( m2.getModel() ) )
                        {
                            if ( m2.getSchemas() != null )
                            {
                                if ( m1.getSchemas() == null )
                                {
                                    m1.setSchemas( new Schemas() );
                                }

                                try ( final java.util.stream.Stream<Schema> st1 =
                                    m2.getSchemas().getSchema().parallelStream().unordered() )
                                {
                                    m1.getSchemas().getSchema().addAll(
                                        st1.filter( s  -> m1.getSchemas().getSchemaBySystemId(
                                            s.getSystemId() ) == null ).
                                            collect( java.util.stream.Collector.of(
                                                java.util.concurrent.CopyOnWriteArrayList::new,
                                                java.util.List::add, ( l1, l2 )  ->
                                            {
                                                l1.addAll( l2 );
                                                return l1;
                                            }, java.util.stream.Collector.Characteristics.CONCURRENT,
                                                java.util.stream.Collector.Characteristics.UNORDERED ) ) );

                                }
                            }

                            if ( m2.getServices() != null )
                            {
                                if ( m1.getServices() == null )
                                {
                                    m1.setServices( new Services() );
                                }

                                try ( final java.util.stream.Stream<Service> st1 =
                                    m2.getServices().getService().parallelStream().unordered() )
                                {
                                    m1.getServices().getService().addAll( st1.map( sl  ->
                                    {
                                        final java.util.concurrent.atomic.AtomicBoolean merged =
                                            new java.util.concurrent.atomic.AtomicBoolean();

                                        try ( final java.util.stream.Stream<Service> st2 =
                                            m1.getServices().getServices( sl.getIdentifier() ).parallelStream().
                                                unordered() )
                                        {
                                            st2.filter( s  -> s.getClazz().equals( sl.getClazz() )
                                                                   && s.getOrdinal() < sl.getOrdinal() ).
                                                forEach( s  ->
                                                {
                                                    s.setOrdinal( sl.getOrdinal() );
                                                    merged.set( true );
                                                } );

                                        }

                                        return merged.get() ? null : sl;
                                    } ).filter( s  -> s != null ).
                                        collect( java.util.stream.Collector.of(
                                            java.util.concurrent.CopyOnWriteArrayList::new,
                                            java.util.List::add, ( l1, l2 )  ->
                                        {
                                            l1.addAll( l2 );
                                            return l1;
                                        }, java.util.stream.Collector.Characteristics.CONCURRENT,
                                            java.util.stream.Collector.Characteristics.UNORDERED ) ) );

                                }
                            }
                        }

                        return m1;
                    } );
        }

        return mergedModlet;
    }

    /**
     * Gets schemas for a model from this list of modlets.
     *
     * @param model The identifier of the model to return schemas of.
     *
     * @return A list of schemas for {@code model} or {@code null}, if no such schemas are found.
     *
     * @throws NullPointerException if {@code model} is {@code null}.
     *
     * @see #getModlet()
     * @see Modlet#getModel()
     */
    public Schemas getSchemas( final String model )
    {
        java.util.Objects.requireNonNull( model, "model" );
        final Schemas schemas = new Schemas();
        final java.util.concurrent.atomic.AtomicBoolean modelFound = new java.util.concurrent.atomic.AtomicBoolean();

        try ( final java.util.stream.Stream<Modlet> st0 = this.getModlet().parallelStream().unordered() )
        {
            schemas.getSchema().addAll(
                st0.filter( m  -> m.getSchemas() != null && !m.getSchemas().getSchema().isEmpty()
                                       && ( ModletObject.MODEL_PUBLIC_ID.equals( m.getModel() )
                                            || model.equals( m.getModel() ) ) ).
                    flatMap( m  ->
                    {
                        modelFound.compareAndSet( false, model.equals( m.getModel() ) );
                        return m.getSchemas().getSchema().parallelStream().unordered();
                    } ).
                    collect( java.util.stream.Collector.of( java.util.concurrent.CopyOnWriteArrayList::new,
                                                            java.util.List::add, ( l1, l2 )  ->
                                                        {
                                                            l1.addAll( l2 );
                                                            return l1;
                                                        }, java.util.stream.Collector.Characteristics.CONCURRENT,
                                                            java.util.stream.Collector.Characteristics.UNORDERED ) ) );

        }

        return modelFound.get() && !schemas.getSchema().isEmpty() ? schemas : null;
    }

    /**
     * Gets services for a model from this list of modlets.
     *
     * @param model The identifier of the model to return services of.
     *
     * @return A list of services for {@code model} or {@code null}, if no such services are found.
     *
     * @throws NullPointerException if {@code model} is {@code null}.
     *
     * @see #getModlet()
     * @see Modlet#getModel()
     */
    public Services getServices( final String model )
    {
        java.util.Objects.requireNonNull( model, "model" );
        final Services services = new Services();
        final java.util.concurrent.atomic.AtomicBoolean modelFound = new java.util.concurrent.atomic.AtomicBoolean();

        try ( final java.util.stream.Stream<Modlet> st0 = this.getModlet().parallelStream().unordered() )
        {
            services.getService().addAll(
                st0.filter( m  -> m.getServices() != null && !m.getServices().getService().isEmpty()
                                       && ( ModletObject.MODEL_PUBLIC_ID.equals( m.getModel() )
                                            || model.equals( m.getModel() ) ) ).
                    flatMap( m  ->
                    {
                        modelFound.compareAndSet( false, model.equals( m.getModel() ) );
                        return m.getServices().getService().parallelStream().unordered();
                    } ).
                    collect( java.util.stream.Collector.of( java.util.concurrent.CopyOnWriteArrayList::new,
                                                            java.util.List::add, ( l1, l2 )  ->
                                                        {
                                                            l1.addAll( l2 );
                                                            return l1;
                                                        }, java.util.stream.Collector.Characteristics.CONCURRENT,
                                                            java.util.stream.Collector.Characteristics.UNORDERED ) ) );

        }

        return modelFound.get() && !services.getService().isEmpty() ? services : null;
    }]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='Modlet']/xs:complexContent/xs:extension/xs:attribute[@name='name']">
      <jaxb:property>
        <jaxb:javadoc>The name of the modlet.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Modlet']/xs:complexContent/xs:extension/xs:attribute[@name='model']">
      <jaxb:property>
        <jaxb:javadoc>The identifier of the model the modlet is part of or {@code null}.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Modlet']/xs:complexContent/xs:extension/xs:attribute[@name='vendor']">
      <jaxb:property>
        <jaxb:javadoc>The vendor of the modlet or {@code null}.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Modlet']/xs:complexContent/xs:extension/xs:attribute[@name='version']">
      <jaxb:property>
        <jaxb:javadoc>The version of the modlet or {@code null}.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Modlet']">
      <ci:code><![CDATA[
    /**
     * Gets a single {@code JAXBElement} matching a namespace URI and local part from the {@code any} property of the
     * instance.
     *
     * @param namespaceURI The namespace URI of the {@code JAXBElement} to return.
     * @param localPart The local part of the {@code JAXBElement} to return.
     * @param type The class of the type the element is bound to.
     * @param <T> The type the element is bound to.
     *
     * @return The {@code JAXBElement} matching {@code namespaceURI} and {@code localPart} from the {@code any} property
     * of the instance or {@code null}, if no such element is found.
     *
     * @throws NullPointerException if {@code namespaceURI}, {@code localPart} or {@code type} is {@code null}.
     * @throws IllegalStateException if the {@code any} property contains more than one matching element.
     *
     * @see #getAnyElement(java.util.List, java.lang.String, java.lang.String, java.lang.Class)
     *
     * @since 1.1
     */
    public <T> javax.xml.bind.JAXBElement<T> getAnyElement( final String namespaceURI, final String localPart,
                                                            final Class<T> type )
    {
        return this.getAnyElement( this.getAny(), namespaceURI, localPart, type );
    }

    /**
     * Gets a list containing all {@code JAXBElement}s matching a namespace URI and local part from the {@code any}
     * property of the instance.
     *
     * @param namespaceURI The namespace URI of the {@code JAXBElement}s to return.
     * @param localPart The local part of the {@code JAXBElement}s to return.
     * @param type The class of the type the elements are bound to.
     * @param <T> The type the elements are bound to.
     *
     * @return An unmodifiable list of all {@code JAXBElement}s matching {@code namespaceURI} and {@code localPart} from
     * the {@code any} property of the instance - an empty list if no such elements are found.
     *
     * @throws NullPointerException if {@code namespaceURI}, {@code localPart} or {@code type} is {@code null}.
     *
     * @see #getAnyElements(java.util.List, java.lang.String, java.lang.String, java.lang.Class)
     *
     * @since 1.1
     */
    public <T> java.util.List<javax.xml.bind.JAXBElement<T>> getAnyElements( final String namespaceURI,
                                                                             final String localPart,
                                                                             final Class<T> type )
    {
        return this.getAnyElements( this.getAny(), namespaceURI, localPart, type );
    }

    /**
     * Gets a single object matching a given class from the {@code any} property of the instance.
     *
     * @param clazz The class to return an instance of.
     * @param <T> The type of the object to return.
     *
     * @return The instance of {@code clazz} from the {@code any} property of the instance or {@code null}, if no such
     * instance is found.
     *
     * @throws NullPointerException if {@code clazz} is {@code null}.
     * @throws IllegalStateException if the {@code any} property contains more than one matching object.
     *
     * @see #getAnyObject(java.util.List, java.lang.Class)
     */
    public <T> T getAnyObject( final Class<T> clazz )
    {
        return this.getAnyObject( this.getAny(), clazz );
    }

    /**
     * Gets a list containing all objects matching a given class from the {@code any} property of the instance.
     *
     * @param clazz The class to return all instances of.
     * @param <T> The type of the objects to return.
     *
     * @return An unmodifiable list of all instances of {@code clazz} from the {@code any} property of the instance -
     * an empty list if no such objects are found.
     *
     * @throws NullPointerException if {@code clazz} is {@code null}.
     *
     * @see #getAnyObjects(java.util.List, java.lang.Class)
     */
    public <T> java.util.List<T> getAnyObjects( final Class<T> clazz )
    {
        return this.getAnyObjects( this.getAny(), clazz );
    }]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='Schemas']">
      <ci:code><![CDATA[
    /**
     * Gets a schema for a given public identifier from the list of schemas.
     *
     * @param publicId The public identifier of the schema to return.
     *
     * @return The first matching schema or {@code null}, if no such schema is found.
     *
     * @throws NullPointerException if {@code publicId} is {@code null}.
     *
     * @see #getSchema()
     * @see Schema#getPublicId()
     */
    public Schema getSchemaByPublicId( final String publicId )
    {
        java.util.Objects.requireNonNull( publicId, "publicId" );
        try ( final java.util.stream.Stream<Schema> st0 = this.getSchema().parallelStream() )
        {
            return st0.filter( s  -> publicId.equals( s.getPublicId() ) ).findFirst().orElse( null );
        }
    }

    /**
     * Gets a schema for a given system identifier from the list of schemas.
     *
     * @param systemId The system identifier of the schema to return.
     *
     * @return The first matching schema or {@code null}, if no such schema is found.
     *
     * @throws NullPointerException if {@code systemId} is {@code null}.
     *
     * @see #getSchema()
     * @see Schema#getSystemId()
     */
    public Schema getSchemaBySystemId( final String systemId )
    {
        java.util.Objects.requireNonNull( systemId, "systemId" );
        try ( final java.util.stream.Stream<Schema> st0 = this.getSchema().parallelStream() )
        {
            return st0.filter( s  -> systemId.equals( s.getSystemId() ) ).findFirst().orElse( null );
        }
    }]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='Schema']/xs:complexContent/xs:extension/xs:attribute[@name='public-id']">
      <jaxb:property>
        <jaxb:javadoc>The public identifier of the referenced schema.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Schema']/xs:complexContent/xs:extension/xs:attribute[@name='system-id']">
      <jaxb:property>
        <jaxb:javadoc>The system identifier of the referenced schema.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Schema']/xs:complexContent/xs:extension/xs:attribute[@name='context-id']">
      <jaxb:property>
        <jaxb:javadoc>The name of the Java package containing JAXB classes of the referenced schema or {@code null}.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Schema']/xs:complexContent/xs:extension/xs:attribute[@name='classpath-id']">
      <jaxb:property>
        <jaxb:javadoc>The Java classpath location of the referenced schema or {@code null}.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Schema']">
      <ci:code><![CDATA[
    /**
     * Gets a single {@code JAXBElement} matching a namespace URI and local part from the {@code any} property of the
     * instance.
     *
     * @param namespaceURI The namespace URI of the {@code JAXBElement} to return.
     * @param localPart The local part of the {@code JAXBElement} to return.
     * @param type The class of the type the element is bound to.
     * @param <T> The type the element is bound to.
     *
     * @return The {@code JAXBElement} matching {@code namespaceURI} and {@code localPart} from the {@code any} property
     * of the instance or {@code null}, if no such element is found.
     *
     * @throws NullPointerException if {@code namespaceURI}, {@code localPart} or {@code type} is {@code null}.
     * @throws IllegalStateException if the {@code any} property contains more than one matching element.
     *
     * @see #getAnyElement(java.util.List, java.lang.String, java.lang.String, java.lang.Class)
     *
     * @since 1.1
     */
    public <T> javax.xml.bind.JAXBElement<T> getAnyElement( final String namespaceURI, final String localPart,
                                                            final Class<T> type )
    {
        return this.getAnyElement( this.getAny(), namespaceURI, localPart, type );
    }

    /**
     * Gets a list containing all {@code JAXBElement}s matching a namespace URI and local part from the {@code any}
     * property of the instance.
     *
     * @param namespaceURI The namespace URI of the {@code JAXBElement}s to return.
     * @param localPart The local part of the {@code JAXBElement}s to return.
     * @param type The class of the type the elements are bound to.
     * @param <T> The type the elements are bound to.
     *
     * @return An unmodifiable list of all {@code JAXBElement}s matching {@code namespaceURI} and {@code localPart} from
     * the {@code any} property of the instance - an empty list if no such elements are found.
     *
     * @throws NullPointerException if {@code namespaceURI}, {@code localPart} or {@code type} is {@code null}.
     *
     * @see #getAnyElements(java.util.List, java.lang.String, java.lang.String, java.lang.Class)
     *
     * @since 1.1
     */
    public <T> java.util.List<javax.xml.bind.JAXBElement<T>> getAnyElements( final String namespaceURI,
                                                                             final String localPart,
                                                                             final Class<T> type )
    {
        return this.getAnyElements( this.getAny(), namespaceURI, localPart, type );
    }

    /**
     * Gets a single object matching a given class from the {@code any} property of the instance.
     *
     * @param clazz The class to return an instance of.
     * @param <T> The type of the object to return.
     *
     * @return The instance of {@code clazz} from the {@code any} property of the instance or {@code null}, if no such
     * instance is found.
     *
     * @throws NullPointerException if {@code clazz} is {@code null}.
     * @throws IllegalStateException if the {@code any} property contains more than one matching object.
     *
     * @see #getAnyObject(java.util.List, java.lang.Class)
     */
    public <T> T getAnyObject( final Class<T> clazz )
    {
        return this.getAnyObject( this.getAny(), clazz );
    }

    /**
     * Gets a list containing all objects matching a given class from the {@code any} property of the instance.
     *
     * @param clazz The class to return all instances of.
     * @param <T> The type of the objects to return.
     *
     * @return An unmodifiable list of all instances of {@code clazz} from the {@code any} property of the instance -
     * an empty list if no such objects are found.
     *
     * @throws NullPointerException if {@code clazz} is {@code null}.
     *
     * @see #getAnyObjects(java.util.List, java.lang.Class)
     */
    public <T> java.util.List<T> getAnyObjects( final Class<T> clazz )
    {
        return this.getAnyObjects( this.getAny(), clazz );
    }]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='Services']">
      <ci:code><![CDATA[
    /**
     * Gets all services for a given identifier from this list of services.
     *
     * @param identifier The identifier of the services to return.
     *
     * @return An unmodifiable, sorted list holding services matching {@code identifier} from the list or an empty list
     * if no services matching {@code identifier} are found.
     *
     * @throws NullPointerException if {@code identifier} is {@code null}.
     *
     * @see #getService()
     */
    public List<Service> getServices( final String identifier )
    {
        java.util.Objects.requireNonNull( identifier, "identifier" );
        final java.util.List<Service> services = new java.util.ArrayList<>( this.getService().size() );

        try ( final java.util.stream.Stream<Service> st0 = this.getService().parallelStream().unordered() )
        {
            services.addAll( st0.filter( s  -> identifier.equals( s.getIdentifier() ) ).
                collect( java.util.stream.Collector.of( java.util.concurrent.CopyOnWriteArrayList::new,
                                                        java.util.List::add, ( l1, l2 )  ->
                                                    {
                                                        l1.addAll( l2 );
                                                        return l1;
                                                    }, java.util.stream.Collector.Characteristics.CONCURRENT,
                                                        java.util.stream.Collector.Characteristics.UNORDERED ) ) );

        }

        java.util.Collections.sort( services, ( s1, s2 )  -> s1.getOrdinal() - s2.getOrdinal() );
        return java.util.Collections.unmodifiableList( services );
    }

    /**
     * Gets all services for a given class from this list of services.
     *
     * @param clazz The class of the services to return.
     *
     * @return An unmodifiable, sorted list holding services matching {@code class} from the list or an empty list
     * if no services matching {@code clazz} are found.
     *
     * @throws NullPointerException if {@code clazz} is {@code null}.
     *
     * @see #getService()
     */
    public List<Service> getServices( final Class<?> clazz )
    {
        java.util.Objects.requireNonNull( clazz, "clazz" );
        return this.getServices( clazz.getName() );
    }]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='Service']/xs:complexContent/xs:extension/xs:attribute[@name='ordinal']">
      <jaxb:property>
        <jaxb:javadoc>The ordinal number of the service.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Service']/xs:complexContent/xs:extension/xs:attribute[@name='identifier']">
      <jaxb:property>
        <jaxb:javadoc>The identifier of the service.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Service']/xs:complexContent/xs:extension/xs:attribute[@name='class']">
      <jaxb:property>
        <jaxb:javadoc>The class providing the service implementation.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Service']">
      <ci:code><![CDATA[
    /**
     * Gets a single {@code JAXBElement} matching a namespace URI and local part from the {@code any} property of the
     * instance.
     *
     * @param namespaceURI The namespace URI of the {@code JAXBElement} to return.
     * @param localPart The local part of the {@code JAXBElement} to return.
     * @param type The class of the type the element is bound to.
     * @param <T> The type the element is bound to.
     *
     * @return The {@code JAXBElement} matching {@code namespaceURI} and {@code localPart} from the {@code any} property
     * of the instance or {@code null}, if no such element is found.
     *
     * @throws NullPointerException if {@code namespaceURI}, {@code localPart} or {@code type} is {@code null}.
     * @throws IllegalStateException if the {@code any} property contains more than one matching element.
     *
     * @see #getAnyElement(java.util.List, java.lang.String, java.lang.String, java.lang.Class)
     *
     * @since 1.1
     */
    public <T> javax.xml.bind.JAXBElement<T> getAnyElement( final String namespaceURI, final String localPart,
                                                            final Class<T> type )
    {
        return this.getAnyElement( this.getAny(), namespaceURI, localPart, type );
    }

    /**
     * Gets a list containing all {@code JAXBElement}s matching a namespace URI and local part from the {@code any}
     * property of the instance.
     *
     * @param namespaceURI The namespace URI of the {@code JAXBElement}s to return.
     * @param localPart The local part of the {@code JAXBElement}s to return.
     * @param type The class of the type the elements are bound to.
     * @param <T> The type the elements are bound to.
     *
     * @return An unmodifiable list of all {@code JAXBElement}s matching {@code namespaceURI} and {@code localPart} from
     * the {@code any} property of the instance - an empty list if no such elements are found.
     *
     * @throws NullPointerException if {@code namespaceURI}, {@code localPart} or {@code type} is {@code null}.
     *
     * @see #getAnyElements(java.util.List, java.lang.String, java.lang.String, java.lang.Class)
     *
     * @since 1.1
     */
    public <T> java.util.List<javax.xml.bind.JAXBElement<T>> getAnyElements( final String namespaceURI,
                                                                             final String localPart,
                                                                             final Class<T> type )
    {
        return this.getAnyElements( this.getAny(), namespaceURI, localPart, type );
    }

    /**
     * Gets a single object matching a given class from the {@code any} property of the instance.
     *
     * @param clazz The class to return an instance of.
     * @param <T> The type of the object to return.
     *
     * @return The instance of {@code clazz} from the {@code any} property of the instance or {@code null}, if no such
     * instance is found.
     *
     * @throws NullPointerException if {@code clazz} is {@code null}.
     * @throws IllegalStateException if the {@code any} property contains more than one matching object.
     *
     * @see #getAnyObject(java.util.List, java.lang.Class)
     */
    public <T> T getAnyObject( final Class<T> clazz )
    {
        return this.getAnyObject( this.getAny(), clazz );
    }

    /**
     * Gets a list containing all objects matching a given class from the {@code any} property of the instance.
     *
     * @param clazz The class to return all instances of.
     * @param <T> The type of the objects to return.
     *
     * @return An unmodifiable list of all instances of {@code clazz} from the {@code any} property of the instance -
     * an empty list if no such objects are found.
     *
     * @throws NullPointerException if {@code clazz} is {@code null}.
     *
     * @see #getAnyObjects(java.util.List, java.lang.Class)
     */
    public <T> java.util.List<T> getAnyObjects( final Class<T> clazz )
    {
        return this.getAnyObjects( this.getAny(), clazz );
    }]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='Property']/xs:complexContent/xs:extension/xs:attribute[@name='name']">
      <jaxb:property>
        <jaxb:javadoc>The name of the property.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Property']/xs:complexContent/xs:extension/xs:attribute[@name='value']">
      <jaxb:property>
        <jaxb:javadoc>The value of the property.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='Property']">
      <ci:code><![CDATA[
    /**
     * Gets a single {@code JAXBElement} matching a namespace URI and local part from the {@code any} property of the
     * instance.
     *
     * @param namespaceURI The namespace URI of the {@code JAXBElement} to return.
     * @param localPart The local part of the {@code JAXBElement} to return.
     * @param type The class of the type the element is bound to.
     * @param <T> The type the element is bound to.
     *
     * @return The {@code JAXBElement} matching {@code namespaceURI} and {@code localPart} from the {@code any} property
     * of the instance or {@code null}, if no such element is found.
     *
     * @throws NullPointerException if {@code namespaceURI}, {@code localPart} or {@code type} is {@code null}.
     * @throws IllegalStateException if the {@code any} property contains more than one matching element.
     *
     * @see #getAnyElement(java.util.List, java.lang.String, java.lang.String, java.lang.Class)
     *
     * @since 1.2
     */
    public <T> javax.xml.bind.JAXBElement<T> getAnyElement( final String namespaceURI, final String localPart,
                                                            final Class<T> type )
    {
        return this.getAnyElement( this.getAny(), namespaceURI, localPart, type );
    }

    /**
     * Gets a list containing all {@code JAXBElement}s matching a namespace URI and local part from the {@code any}
     * property of the instance.
     *
     * @param namespaceURI The namespace URI of the {@code JAXBElement}s to return.
     * @param localPart The local part of the {@code JAXBElement}s to return.
     * @param type The class of the type the elements are bound to.
     * @param <T> The type the elements are bound to.
     *
     * @return An unmodifiable list of all {@code JAXBElement}s matching {@code namespaceURI} and {@code localPart} from
     * the {@code any} property of the instance - an empty list if no such elements are found.
     *
     * @throws NullPointerException if {@code namespaceURI}, {@code localPart} or {@code type} is {@code null}.
     *
     * @see #getAnyElements(java.util.List, java.lang.String, java.lang.String, java.lang.Class)
     *
     * @since 1.2
     */
    public <T> java.util.List<javax.xml.bind.JAXBElement<T>> getAnyElements( final String namespaceURI,
                                                                             final String localPart,
                                                                             final Class<T> type )
    {
        return this.getAnyElements( this.getAny(), namespaceURI, localPart, type );
    }

    /**
     * Gets a single object matching a given class from the {@code any} property of the instance.
     *
     * @param clazz The class to return an instance of.
     * @param <T> The type of the object to return.
     *
     * @return The instance of {@code clazz} from the {@code any} property of the instance or {@code null}, if no such
     * instance is found.
     *
     * @throws NullPointerException if {@code clazz} is {@code null}.
     * @throws IllegalStateException if the {@code any} property contains more than one matching object.
     *
     * @see #getAnyObject(java.util.List, java.lang.Class)
     */
    public <T> T getAnyObject( final Class<T> clazz )
    {
        return this.getAnyObject( this.getAny(), clazz );
    }

    /**
     * Gets a list containing all objects matching a given class from the {@code any} property of the instance.
     *
     * @param clazz The class to return all instances of.
     * @param <T> The type of the objects to return.
     *
     * @return An unmodifiable list of all instances of {@code clazz} from the {@code any} property of the instance -
     * an empty list if no such objects are found.
     *
     * @throws NullPointerException if {@code clazz} is {@code null}.
     *
     * @see #getAnyObjects(java.util.List, java.lang.Class)
     */
    public <T> java.util.List<T> getAnyObjects( final Class<T> clazz )
    {
        return this.getAnyObjects( this.getAny(), clazz );
    }]]>
      </ci:code>
    </jaxb:bindings>
  </jaxb:bindings>
</jaxb:bindings>
